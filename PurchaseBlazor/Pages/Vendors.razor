@page "/vendors"
@using System.Net.Http.Headers
@using System.IO
@inject HttpClient _client
@inject NavigationManager NavigationManager
@*inject IDialogService DialogService*@

<h1>Gestion des fournisseurs</h1>
<MudPaper Class="mb-5 mt-5" Elevation="0">
    @* <MudText Typo="Typo.body1">Les Fournisseurs agréés par ICS</MudText> *@
</MudPaper>
<MudSpacer></MudSpacer>
<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudIcon Icon="@Icons.Material.Outlined.List"></MudIcon>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">Les Fournisseurs agréés par ICS</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Outlined.Add" Color="Color.Inherit" OnClick="OpenAddMessageBox" />
            <MudIconButton Icon="@Icons.Material.Outlined.ImportExport" Color="Color.Inherit"
                OnClick="OpenImportDialog" />
        </CardHeaderActions>
    </MudCardHeader>

    <MudCardContent>

        @if (!string.IsNullOrWhiteSpace(_message))
        {
            <MessageAlert CloseAlert="CloseAlert" Message="@_message" Severity="@_severity"></MessageAlert>
        }

        <MudTable Items="@_vendorList" Dense="@_dense" Striped="true" Hover="true" Breakpoint="Breakpoint.Sm"
            @bind-SelectedItem="_selectedVendor" @ref="_mudTable" Filter="new Func<Vendor, bool>(FilterFuncInAction)"
            RowClassFunc="@SelectedRowClassFunc" T="Vendor" Loading="@_loading" LoadingProgressColor="Color.Info">
            <ToolBarContent>
                <MudText Inline="true" Typo="Typo.h6">Liste des fournisseurs</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchTexte" Placeholder="Recherche..." Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
            </ToolBarContent>
            <HeaderContent>

                <MudTh>Nom</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Téléphone</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Orders</MudTh>
                <MudTh>Commentaires</MudTh>

                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>

                <MudTd DataLabel="Nom">@context.Name</MudTd>
                <MudTd DataLabel="E-mail">@context.EmailId</MudTd>
                <MudTd DataLabel="Téléphone">@context.Telephone</MudTd>
                <MudTd DataLabel="Type">@context.Type</MudTd>
                <MudTd DataLabel="Orders">@context.Orders?.Count</MudTd>
                <MudTd DataLabel="Commentaires">@context.Comments</MudTd>
                <MudTd>
                    <MudIconButton Class="pa-0" Icon="@Icons.Material.Filled.Source"
                        OnClick="() => OpenPageDetail(context.Id)" aria-label="Détails" Color="Color.Inherit" />
                </MudTd>
                <MudTd>
                    <MudIconButton Class="pa-0" Icon="@Icons.Material.Filled.Edit"
                        OnClick="() => OpenUpdateMessageBox(context)" aria-label="Modifier" Color="Color.Inherit" />
                </MudTd>
                <MudTd>
                    <MudIconButton Class="pa-0" Icon="@Icons.Material.Filled.Delete"
                        OnClick="() => OpenDeleteMessageBox(context)" aria-label="Supprimer" Color="Color.Inherit" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <MudPaper Class="mt-2">
            <MudText Inline="true" Typo="Typo.h6" Class="align-self-center ml-2">@_selectedVendor?.Name</MudText>

        </MudPaper>

    </MudCardContent>

</MudCard>
@*
    MessageBor for Add Vendor
*@
<MudMessageBox @ref="_addMessageBox" CancelText="Annuler">
    <MessageContent>
        <div style="min-width: 400px; max-width: 400px;">
            <EditForm Model="_addVendor">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Nom" Helpertext="Min 3 caractères" For="@(() => _addVendor.Name)"
                            @bind-Value="_addVendor.Name" />
                        <MudTextField Label="E-mail" HelperText="Adresse e-mail" For="@(() => _addVendor.EmailId )"
                            @bind-Value="_addVendor.EmailId" />
                        <MudTextField Label="Téléphone" HelperText="Exemple: +221775422420"
                            For="@(() => _addVendor.Telephone)" @bind-Value="_addVendor.Telephone" />
                        <MudSelect @bind-Value="_addVendor.Type" Label="Type" For="() => _addVendor.Type" T="string">
                            @foreach (var type in Types)
                            {
                                <MudSelectItem Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTextField Label="Commentaires" HelperText="fournisseur local"
                            For="@(() => _addVendor.Comments)" @bind-Value="_addVendor.Comments" />
                    </MudCardContent>

                </MudCard>
            </EditForm>
        </div>
    </MessageContent>
    <YesButton>
        <MudButton OnClick="() => AddNewVendor(_addVendor)" Variant="Variant.Filled"
            EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Ajouter</MudButton>
    </YesButton>
</MudMessageBox>
@*
    MessageBox for update Vendor
*@
<MudMessageBox @ref="_updateMessageBox" Title=@($"Modification Vendor {_selectedVendor?.Name}") CancelText="Annuler">
    <MessageContent>
        <div style="min-width: 400px; max-width: 400px;">
            <EditForm Model="_selectedVendor">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Nom" Helpertext="Min 3 caractères" For="@(() => _selectedVendor.Name)"
                            @bind-Value="_selectedVendor.Name" />
                        <MudTextField Label="E-mail" HelperText="Adresse e-mail" For="@(() => _selectedVendor.EmailId )"
                            @bind-Value="_selectedVendor.EmailId" />
                        <MudTextField Label="Téléphone" HelperText="Exemple: +221775422420"
                            For="@(() => _selectedVendor.Telephone)" @bind-Value="_selectedVendor.Telephone" />
                        <MudSelect @bind-Value="_selectedVendor.Type" Label="Type" For="() => _selectedVendor.Type"
                            T="string">
                            @foreach (var type in Types)
                            {
                                <MudSelectItem Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTextField Label="Commentaires" HelperText="fournisseur local"
                            For="@(() => _selectedVendor.Comments)" @bind-Value="_selectedVendor.Comments" />
                    </MudCardContent>
                    <MudCardActions>

                    </MudCardActions>
                </MudCard>
            </EditForm>
        </div>
    </MessageContent>
    <YesButton>
        <MudButton OnClick="() => UpdateSelectedVendor(_selectedVendor)" Variant="Variant.Filled"
            StartIcon="@Icons.Material.Filled.Check" Color="Color.Primary">Modifier</MudButton>
    </YesButton>
</MudMessageBox>

@*
    MessageBox for delete vendor
*@
<MudMessageBox @ref="_deleteMessageBox" CancelText="Annuler">
    <MessageContent>
        <div style="min-width: 400px; max-width: 400px;">
            <MudText>Voulez-vous vraiment supprimer le fournisseur </MudText>
        </div>
    </MessageContent>
    <YesButton>
        <MudButton OnClick="() => DeleteSelectedVendor(_selectedVendor)" Variant="Variant.Filled"
            EndIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Supprimer</MudButton>
    </YesButton>
</MudMessageBox>

@*
    Dialog for import Vendors
*@
<MudDialog @ref="_importDialog">
    <DialogContent>
        <MudPaper Class="d-flex align-center py-2 px-1" Elevation="0" Style="min-width: 400px; min-height: 100px">
            <InputFile id="fileInput" OnChange="ImportVendors" accept=".csv" hidden />
            <MudButton htmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.AttachFile" For="fileInput">
                Importer
                @* <MudProgressLinear Color="Color.Warning" Indeterminate="true" /> *@

            </MudButton>
            <MudText>@_fileName</MudText>
            <MudSpacer />
            <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="_loading" />

        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseImportDialog">Fermer</MudButton>
    </DialogActions>

</MudDialog>
@code {

    private string _fileName = "";
    private void OpenImportDialog()
    {
        _importDialog.Show("Importer les fournisseurs");
    }

    private void CloseImportDialog()
    {
        _importDialog.Close();
    }
    private async Task ImportVendors(InputFileChangeEventArgs e)
    {

        IBrowserFile file = e.File;
        _fileName = file.Name;
        var content = new MultipartFormDataContent();
        using (var fs = file.OpenReadStream())
        {
            using (var streamContent = new StreamContent(fs))
            {
                using (var fileContent = new ByteArrayContent(await streamContent.ReadAsByteArrayAsync()))
                {
                    fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse("multipart/form-data");
                    content.Add(fileContent, "file", file.Name);

                    var request = _client.PostAsync("api/vendors/UploadVendors", content);
                    _loading = !request.IsCompleted;
                    var status = await request;
                    if (status.IsSuccessStatusCode)
                    {
                        _message = "Fournisseur importés avec succés.";
                        _severity = Severity.Success;
                        _importDialog.Close();

                    }
                    else
                    {
                        _message = "Erreur inattendue lors de l'importation'.";
                        _severity = Severity.Error;
                    }
                    _loading = false;
                }
            }
        }


    }

    private MudDialog _importDialog;
    private List<Vendor> _vendorList;

    private string _message = "";
    private bool _loading;
    private Task<List<Vendor>> _vendorsLoading;
    private Task<HttpResponseMessage> _vendorLoading;

    private MudMessageBox _updateMessageBox;
    private MudMessageBox _addMessageBox;
    private MudMessageBox _deleteMessageBox;

    private Vendor _selectedVendor;
    private Vendor _addVendor;
    private string _searchTexte = "";
    private Severity _severity = Severity.Info;
    private bool _dense = true;
    private MudTable<Vendor> _mudTable;
    private HashSet<Vendor> selectedItems = new HashSet<Vendor>();
    private List<string> Types = new List<string> { "Locale", "Europe", "Asie" };
    protected override async Task OnInitializedAsync()
    {
        _vendorList = new List<Vendor>();
        _loading = true;
        try
        {
            _vendorsLoading = _client.GetFromJsonAsync<List<Vendor>>("api/vendors/Get");
            _loading = !_vendorsLoading.IsCompleted;
            _vendorList = await _vendorsLoading;
            if (_vendorsLoading.IsCompleted)
            {
                _loading = false;
            }

        }
        catch (Exception ex)
        {
            _message = ex.Message;
            _severity = Severity.Error;
            _loading = false;
        }

    }

    public void CloseAlert()
    {
        _message = "";
    }

    //delegate pour le filtrage
    private bool FilterFuncInAction(Vendor vendor) => FilterFunc(vendor, _searchTexte);
    //Filtrage des enregistrements
    private bool FilterFunc(Vendor vendor, string query)
    {
        //remove the selected item
        //_selectedVendor = null;
        if (string.IsNullOrWhiteSpace(query.ToLower()))
            return true;
        if (vendor.Name != null)
            if (vendor.Name.ToLower().Contains(query.ToLower()))
                return true;
        if (vendor.Comments != null)
            if (vendor.Comments.ToLower().Contains(query.ToLower()))
                return true;
        return false;
    }

    private async Task AddNewVendor(Vendor vendor)
    {
        try
        {
            _vendorLoading = _client.PostAsJsonAsync("api/vendors/Post", vendor);
            _loading = !_vendorLoading.IsCompleted;

            var statusMessage = await _vendorLoading;
            _message = statusMessage.IsSuccessStatusCode ? "Fournisseur ajouté succés." : "Erreur lors de l'ajout";
            _severity = Severity.Success;
            _vendorList.Add(_addVendor);
            _loading = false;
        }
        catch (Exception ex)
        {
            _message = ex.Message;
            _severity = Severity.Error;
        }
    }

    private async Task UpdateSelectedVendor(Vendor selectedvendor)
    {
        try
        {
            _vendorLoading = _client.PutAsJsonAsync($"api/vendors/Put/{selectedvendor.Id}", selectedvendor);
            _loading = !_vendorLoading.IsCompleted;

            var statusMessage = await _vendorLoading;
            _message = statusMessage.IsSuccessStatusCode ? "Fournisseur modifié avec succés." : "Erreur lors de la modification.";
            _severity = Severity.Success;
            _loading = false;
        }
        catch (Exception ex)
        {
            _message = ex.Message;
            _severity = Severity.Error;
        }
    }

    private async Task DeleteSelectedVendor(Vendor selectedVendor)
    {
        if (!(selectedVendor.Orders?.Count > 0))
        {
            try
            {
                _vendorLoading = _client.DeleteAsync($"api/vendors/Delete/{selectedVendor.Id}");
                _loading = !_vendorLoading.IsCompleted;

                var statusMessage = await _vendorLoading;
                _message = statusMessage.IsSuccessStatusCode ? "Fournisseur supprimé avec succés." : "Erreur lors de la suppression.";
                _severity = Severity.Success;
                _vendorList.Remove(selectedVendor);
                _loading = false;
            }
            catch (Exception ex)
            {
                _message = ex.Message;
                _severity = Severity.Error;
            }
        }
        else
        {
            _message = $"Le fournisseur {selectedVendor.Name} a des commandes, supprimer d'abord les commandes.";
            _severity = Severity.Normal;
        }
    }

    private async Task OpenAddMessageBox()
    {
        _addVendor = new Vendor();
        _addMessageBox.Title = "Ajouter un fournisseur";
        bool? result = await _addMessageBox.Show();
        if (result == null) _message = "ajout annulé";
        StateHasChanged();
    }
    private async Task OpenUpdateMessageBox(Vendor vendor)
    {
        _selectedVendor = vendor;
        _updateMessageBox.Title = $"Modification fournisseur {vendor.Name}";
        bool? result = await _updateMessageBox.Show();
        _message = result == null ? "Annulé" : "Fournisseur Modifié";
        StateHasChanged();

    }

    private async Task OpenDeleteMessageBox(Vendor vendor)
    {
        _selectedVendor = vendor;
        _deleteMessageBox.Title = $"Supprimer le fournisseur {_selectedVendor.Name}";
        bool? result = await _deleteMessageBox.Show();
        if (result == null) _message = "Suppression annulé.";
        StateHasChanged();
    }

    private void OpenPageDetail(string id)
    {
        NavigationManager.NavigateTo($"vendordetails/{id}");
    }
    private string SelectedRowClassFunc(Vendor vendor, int i)
    {
        if (_mudTable.SelectedItem != null && _mudTable.SelectedItem.Equals(vendor))
        {

            return "selected";
        }
        return string.Empty;
    }


}