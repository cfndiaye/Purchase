@inject NavigationManager NavigationManager
@inject HttpClient _client
@using System.Globalization
@using PurchaseShared.Helpers
@inject IDialogService DialogService

<MudCardContent>
    @if (!string.IsNullOrWhiteSpace(Message))
    {
        <MessageAlert Message="@Message" Severity="@Severity" CloseAlert="CloseAlert" />
    }

    <MudTable @ref="_mudTable" Items="@OrdersFiltered" Dense="@Dense"
              Striped="true" Hover="false" Breakpoint="Breakpoint.Sm"
              @bind-SelectedItem="SelectedOrder" Loading="@Loading"
              RowClassFunc="@SelectedRowClassFunc" T="Order"
              LoadingProgressColor="Color.Success">
        <ToolBarContent>
            <MudText Inline="true" Typo="Typo.h6">@TitreTable</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="SearchTexte" Placeholder="Recherche..." TextChanged="() => OnFilter()"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0" />

        </ToolBarContent>
        <HeaderContent>
            <MudTh>PO</MudTh>
            <MudTh>DA</MudTh>
            <MudTh>Vendor</MudTh>
            <MudTh>Description</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Order, object>(o => o.DatePo)">Date PO</MudTableSortLabel></MudTh>

            <MudTh><MudTableSortLabel SortBy="new Func<Order, object>(o => o.DatePo)">Age</MudTableSortLabel></MudTh>
            <MudTh>Status</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="PO">@context.PurchaseOrder</MudTd>
            <MudTd DataLabel="DA">@context.ReqNumber.ToString()</MudTd>
            <MudTd HideSmall="true" DataLabel="Vendor">@context.Vendor?.Name <MudButton Color="Color.Inherit" Size="Size.Small" OnClick="() => GotoPage(context.VendorId)">...</MudButton></MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Date PO">@context.DatePo.Value.ToString(format: "dd/MM/yyyy")</MudTd>

            <MudTd DataLabel="Age">@CalculeAge(context.DatePo.Value, context.ApprovedDate.Value).ToString()</MudTd>
            <MudTd DataLabel="Status">
                <MudChip Size="Size.Small" Variant="Variant.Filled" Color="@GetColor(context)" OnClick="() => _OpenDialogStatus()">
                    @context.Status
                </MudChip>


            </MudTd>
            <MudTd>
                <MudTooltip Text="Dupliquer" Color="Color.Tertiary" Placement="Placement.Left">
                    <MudIconButton Class="pa-0" OnClick="() => DuplicateOrder(context, OrdersList.IndexOf(context))" Icon="@Icons.Material.Filled.ContentCopy" aria-label="Dupliquer" Color="Color.Inherit" />
                </MudTooltip>
            </MudTd>
            <MudTd>
                <MudTooltip Text="Modifier" Color="Color.Tertiary" Placement="Placement.Left">
                    <MudIconButton Class="pa-0" OnClick="() => OpenUpdateDialog(context)" Icon="@Icons.Material.Filled.Edit" aria-label="Modifier" Color="Color.Inherit" />
                </MudTooltip>
            </MudTd>
            <MudTd>
                <MudTooltip Text="Supprimer" Color="Color.Tertiary" Placement="Placement.Left">
                    <MudIconButton Class="pa-0" OnClick="() => OpenDeleteDialog(context)" Icon="@Icons.Material.Filled.Delete" aria-label="Supprimer" Color="Color.Inherit" />
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="SizeOptions" RowsPerPageString="Commandes par page" />
        </PagerContent>

    </MudTable>

</MudCardContent>

@* Dialog update order status*@
<MudDialog @ref="_dialogUpdateStatus">
    <DialogContent>

        <MudPaper>
            <MudList Clickable="true">
                <MudListSubheader>Change Order status</MudListSubheader>
                <MudListItem><MudButton Variant="Variant.Filled" FullWidth="true" OnClick="async () => await ChangeOrederStatus(OrderStatus.PO_INQUERY_SEND)" Color="Color.Info">INQUERY SEND</MudButton></MudListItem>
                <MudListItem><MudButton Variant="Variant.Filled" FullWidth="true" OnClick="async () => await ChangeOrederStatus(OrderStatus.PO_APPROVAL)" Color="Color.Info">PO APPROVAL</MudButton></MudListItem>
                <MudListItem><MudButton Variant="Variant.Filled" FullWidth="true" OnClick="async () => await ChangeOrederStatus(OrderStatus.PO_RELEASED)" Color="Color.Success">PO RELEASED</MudButton></MudListItem>
                <MudListItem><MudButton Variant="Variant.Filled" FullWidth="true" OnClick="async () => await ChangeOrederStatus(OrderStatus.TECHNICAL_CLEARANCE)" Color="Color.Primary">IN TECHNICAL CLEARANCE</MudButton></MudListItem>
                <MudListItem><MudButton Variant="Variant.Filled" FullWidth="true" OnClick="async () => await ChangeOrederStatus(OrderStatus.PR_PENDING)" Color="Color.Secondary">PR PENDING</MudButton></MudListItem>
                <MudListItem><MudButton Variant="Variant.Filled" FullWidth="true" OnClick="async () => await ChangeOrederStatus(OrderStatus.WAITING_PROFORMA)" Color="Color.Warning">WAITING PROFORMA</MudButton></MudListItem>
                <MudListItem><MudButton Variant="Variant.Filled" FullWidth="true" OnClick="async () => await ChangeOrederStatus(OrderStatus.DPI_AC)" Color="Color.Dark">DPI&AC</MudButton></MudListItem>
                <MudListItem><MudButton Variant="Variant.Filled" FullWidth="true" OnClick="async () => await ChangeOrederStatus(OrderStatus.PO_CANCELED)" Color="Color.Error">PO CANCELLED</MudButton></MudListItem>
                <MudListItem><MudButton Variant="Variant.Filled" FullWidth="true" OnClick="async () => await ChangeOrederStatus(OrderStatus.PO_COMPLETED)" Color="Color.Success">PO COMPLETED</MudButton></MudListItem>
            </MudList>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => _dialogUpdateStatus.Close()">Annuler</MudButton>
        <MudButton Color="Color.Primary" OnClick="() => _dialogUpdateStatus.Close(DialogResult.Ok(true))">Fermer</MudButton>
    </DialogActions>
</MudDialog>

@* Dialog update order*@
<UpdateOrder @ref="_updateOrder" @bind-Message="@Message"
             @bind-Severity="@Severity"
             @bind-OrdersList="@OrdersFiltered"
             Client="Client" />

@* Dialog delete order*@
<DeleteOrder @ref="_deleteOrder" OrdersList="OrdersFiltered"
             Client="Client"
             @bind-Message="@Message"
             @bind-Severity="@Severity"
             @bind-Loading="@Loading" />

@code {

    [Parameter] public int[] SizeOptions { get; set; } = { 5, 10, 15, 20, 30, 40, 50 };
    private UpdateOrder _updateOrder;
    private DeleteOrder _deleteOrder;
    [Parameter] public string TitreTable { get; set; } = "Liste des commandes";

    public string SearchTexte { get; set; } = "";
    public EventCallback<string> SearchTexteChanged { get; set; }
    public async Task OnSearchTexteChanged()
    {
        OnFilter();
        await SearchTexteChanged.InvokeAsync(SearchTexte);
    }


    [Parameter]
    public HttpClient Client { get; set; }


    [Parameter]
    public string Message { get; set; } = "";
    [Parameter]
    public Severity Severity { get; set; } = Severity.Info;

    private List<Order> OrdersFiltered = new List<Order>();
    private List<Order> OrdersList = new List<Order>();

    private MudTable<Order> _mudTable;

    [Parameter]
    public bool Dense { get; set; } = true;

    [Parameter]
    public Margin MarginDense { get; set; } = Margin.Dense;

    [Parameter]
    public Order SelectedOrder { get; set; }
    [Parameter]
    public bool Loading { get; set; }

    private void _OpenDialogStatus()
    {
        DialogOptions dialogOptions = new DialogOptions { DisableBackdropClick = true };
        _dialogUpdateStatus.Show("Changer le status de la commande", dialogOptions);
    }

    private async Task ChangeOrederStatus(string status)
    {
        var urlApi = $"api/orders/Put/{SelectedOrder.Id}";

        SelectedOrder.Status = status;

        var request = await Client.PutAsJsonAsync(urlApi, SelectedOrder);
        if(request.IsSuccessStatusCode)
        {
            Message = "Status modifié avec succès";
            Severity = Severity.Success;
        }
        else
        {
                Message = "Error lors de la mise à jour";
                Severity = Severity.Error;
        }

        _dialogUpdateStatus.Close();
    }

    private MudDialog _dialogUpdateStatus;


    private int CalculeAge(DateTime d2, DateTime d1) => Age(d1, d2);

    //Delegate for calcul aging or Pr
    private int Age(DateTime dateDebut, DateTime dateFin)
    {
        return (dateFin - dateDebut).Days;
    }

    private Color GetColor(Order order)
    {
        var color = Color.Transparent;

        switch (order.Status)
        {
            case "PO APPROVAL":
                color = Color.Info;
                break;
            case "PO RELEASED":
                color = Color.Success;
                break;
            case "TECHNICAL CLEARANCE":
                color = Color.Primary;
                break;
            case "PR PENDING":
                color = Color.Secondary;
                break;
            case "WAITING PROFORMA":
                color = Color.Warning;
                break;
            case "DPI-AC":
                color = Color.Dark;
                break;
            case "PO CANCELED":
                color = Color.Error;
                break;

            default:
                break;
        }
        return color;
    }


    private void CloseAlert()
    {
        Message = "";
    }

    //open update Dialog
    private void OpenUpdateDialog(Order order)
    {
        _updateOrder.Show(order);
    }

    //open delete Dialog
    private async Task OpenDeleteDialog(Order order)
    {

        await _deleteOrder.Show(order);
    }



    //set color to the selected order
    private string SelectedRowClassFunc(Order order, int i)
    {
        if (_mudTable.SelectedItem != null && _mudTable.SelectedItem.Equals(order))
        {
            return "selected";
        }

        string rowClass = "";
        switch (order.Status)
        {
            case "PO RELEASED":
                rowClass = "success-po-released";
                break;
            case "PR PENDING":
                rowClass = "warning";
                break;
            case "TECHNICAL CLEARANCE":
                rowClass = "info";
                break;
            case "WAITING PROFORMA":
                rowClass = "info";
                break;
            case "DPI&AC":
                rowClass = "info";
                break;
        }
        // return rowClass;
        rowClass = "";
        return rowClass;
    }

    //Dupliquer la ligne de command selectionnée
    private async Task DuplicateOrder(Order order, int index)
    {
        //copy order information
        Order orderCopy = order.Clone();
        orderCopy.Id = null;
        orderCopy.PurchaseOrder += " - COPIE";



        //Enregistrement de la commande au niveau de l'Api
        var url = "api/orders/Post";
        var request = await _client.PostAsJsonAsync<Order>(url, orderCopy);

           
        if (request.IsSuccessStatusCode)
        {
            //Récupération de la commande après son enregistrement
            var freshOrder = await request.Content.ReadFromJsonAsync<Order>();
            OrdersList.Insert(index + 1, freshOrder);

            Message = "Commande dupliquée avec succés. ";
            Severity = Severity.Success;
        }
        else
        {
            Message = "Erreur lors de la copie. ";
            Severity = Severity.Error;
        }
    }

    //delegate pour le filtrage
    private bool FilterInAction(Order order) => Filters.FilterFunction(order, SearchTexte);

    private void FilterOrders(List<Order> orders)
    {
        OrdersFiltered = orders.FindAll(o => FilterInAction(o));
    }

    private void OnFilter()
    {
        FilterOrders(OrdersList);
    }

    //initiliser les données de la table
    public void DataLoaded(bool charged, List<Order> orders)
    {
        if (charged)
        {
            OrdersList = orders;
            OrdersFiltered = orders;
        }
    }

    private void GotoPage(string id)
    {
        NavigationManager.NavigateTo($"vendordetails/{id}");
    }

    


}
