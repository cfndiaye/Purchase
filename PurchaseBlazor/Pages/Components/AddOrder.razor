@using System.ComponentModel.DataAnnotations
@using System.Globalization
@inject IDialogService DialogService

<MudDialog @ref="_addMudDialog">

    <DialogContent>
        <div style="min-width: 400px;">
            
            <FormOrder OrderForm="_addForm" CloseDialog="CloseAddDialog" MarginDense="MarginDense"
                       OnValidSubmit="() => OnValidSubmit(_addForm.EditContext)" OrderModel="_addOrder"
                       BtnLabel = "Ajouter"
                       FindDescription="FindDescription" FindVendorsAsync="FindVendorsAsync" />
        </div>
    </DialogContent>



</MudDialog>
@code {
    




    private Order _addOrder;
    [Parameter]
    public bool Loading { get; set; }
    [Parameter]
    public EventCallback<bool> LoadingChanged { get; set; }
    private EditForm _addForm = new EditForm();
    private MudDialog _addMudDialog;
    private Task<HttpResponseMessage> _orderLoading;
    [Parameter]
    public Severity Severity { get; set; } = Severity.Info;
    [Parameter]
    public EventCallback<Severity> SeverityChanged { get; set; }
    [Parameter]
    public List<Order> OrdersList { get; set; } = new List<Order>();
    [Parameter]
    public EventCallback<List<Order>> OrdersListChanged { get; set; }
    [Parameter]
    public string Message { get; set; }
    [Parameter]
    public EventCallback<string> MessageChanged { get; set; }
    [Parameter]
    public HttpClient Client { get; set; }
    [Parameter]
    public Margin MarginDense { get; set; } = Margin.Dense;
    public EventCallback<string> _selectedVendorChanged { get; set; }

    private const string URLPOSTORDER = "api/orders/Post";
    private const string URLGETVENDOR = "api/vendors/Get/";

    //Post order
    private async Task OnValidSubmit(EditContext context)
    {

        if (_addOrder.VendorId.Length > 24)
        {
            _addOrder.VendorId = _addOrder.VendorId.Substring(0, 24);
        }
        await AddNewOrder(_addOrder);
        _addMudDialog.Close();

    }



    //Open MudDialog Add Order
    public void Show()
    {
        _addOrder = new Order();
        // _addMudDialog.ClassActions = "d-flex px-6 justify-space-between py-6";

        DialogOptions dialogOptions = new DialogOptions { DisableBackdropClick = true };
        _addMudDialog.Show("Ajouter une commande", dialogOptions);

    }


    //Add new order
    private async Task AddNewOrder(Order order)
    {

        try
        {
            _orderLoading = Client.PostAsJsonAsync(URLPOSTORDER, order);
            Loading = !_orderLoading.IsCompleted;
            await LoadingChanged.InvokeAsync(Loading);

            var statusMessage = await _orderLoading;

            if (statusMessage.IsSuccessStatusCode)
            {
                var freshOrder = await statusMessage.Content.ReadFromJsonAsync<Order>();
                Message = "Commande ajoutée avec succés. ";
                await MessageChanged.InvokeAsync(Message);
                Severity = Severity.Success;
                await SeverityChanged.InvokeAsync(Severity);
                //Récupération du nom du vendor
                freshOrder.Vendor = await Client.GetFromJsonAsync<Vendor>(URLGETVENDOR + order.VendorId);
                OrdersList.Add(freshOrder);

                await OrdersListChanged.InvokeAsync(OrdersList);

            }
            else
            {
                Message = $"Erreur lors de l'ajout!!!";
                Severity = Message.Contains("Erreur") ? Severity.Error : Severity.Success;
                await MessageChanged.InvokeAsync(Message);
            }

        }
        catch (Exception ex)
        {
            Message = ex.Message;
            await MessageChanged.InvokeAsync(Message);
            Severity = Severity.Error;
            await SeverityChanged.InvokeAsync(Severity);
        }

        Loading = false;
        await LoadingChanged.InvokeAsync(Loading);
    }

    //Close AddDialog Add Order
    private void CloseAddDialog()
    {
        _addMudDialog.Close();
    }

    //find vendor for Autocomplete
    private async Task<IEnumerable<string>> FindVendorsAsync(string searchVendor) => await FindVendor.FindVendorsAsyncDelegate(searchVendor, Client);
    private string FindDescription(string query) => FindVendor.GetDescription(query);


    }
