@using System.Globalization
@inject IDialogService DialogService
@*Update order*@
<MudDialog @ref="_updateMudDialog">

    <DialogContent>
        <div style="min-width: 400px;">
            <FormOrder OrderForm="_updateForm" CloseDialog="CloseUpdateDialog" MarginDense="_marginDense"
                       OnValidSubmit="() => OnValidUpdateSubmit(_updateForm.EditContext)" OrderModel="_selectedOrder"
                       BtnLabel = "Modifier" BtnIcon="@Icons.Material.Filled.Edit"
                       FindDescription="FindDescription" FindVendorsAsync="FindVendorsAsync" />
        </div>
    </DialogContent>


</MudDialog>

@code {
    

    //public string _selectedVendor { get; set; } = "";

    //public string _selectedVendorId { get; set; } = "";

    public Order _selectedOrder;

    [Parameter]
    public HttpClient Client { get; set; }

    private Margin _marginDense = Margin.Dense;

    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public EventCallback<string> MessageChanged { get; set; }

    [Parameter]
    public Severity Severity { get; set; } = Severity.Info;

    [Parameter]
    public EventCallback<Severity> SeverityChanged { get; set; }

    [Parameter]
    public List<Order> OrdersList { get; set; }
    [Parameter]
    public EventCallback<List<Order>> OrdersListChanged { get; set; }

    private bool _loading = false;

    private EditForm _updateForm  = new EditForm();
    private MudDialog _updateMudDialog;

    private Task<List<Order>> _ordersLoading;
    private Task<HttpResponseMessage> _orderLoading;

    private const string URLPUTORDER = "api/Orders/Put/";
    private const string URLGETVENDOR = "api/vendors/Get/";

    //Put Order
    private async Task OnValidUpdateSubmit(EditContext context)
    {
        if (_selectedOrder.VendorId.Length > 24)
        {
            _selectedOrder.VendorId = _selectedOrder.VendorId.Substring(0, 24);

        }
        await UpdateSelectedOrder(_selectedOrder);
        _updateMudDialog.Close();
    }
    //Update one order
    private async Task UpdateSelectedOrder(Order order)
    {
        try
        {
            _orderLoading = Client.PutAsJsonAsync($"{URLPUTORDER}{order.Id}", order);
            _loading = !_orderLoading.IsCompleted;

            var statusMessage = await _orderLoading;
            Message = statusMessage.IsSuccessStatusCode ? "Commande modifiée avec succés." : "Erreur lors de la mis à jour";

            await MessageChanged.InvokeAsync(Message);
            Severity = Message.Contains("Erreur") ? Severity.Error : Severity.Success;

            await SeverityChanged.InvokeAsync(Severity);

            //Mis à jour de la table
            OrdersList.Remove(order);
            //Récupération du nom du vendor
            order.Vendor = await Client.GetFromJsonAsync<Vendor>(URLGETVENDOR + order.VendorId);
            OrdersList.Add(order);
            await OrdersListChanged.InvokeAsync(OrdersList);

        }
        catch (Exception ex)
        {
            Message = ex.Message;
            await MessageChanged.InvokeAsync(Message);
            Severity = Severity.Error;
            await SeverityChanged.InvokeAsync(Severity);
        }

        _loading = false;
    }

    //Open MudDialog Update Order
    public void Show(Order order)
    {

        _selectedOrder = order;
        //_updateMudDialog.ClassActions = "d-flex px-6 justify-space-between py-6";
        DialogOptions dialogOptions = new DialogOptions { DisableBackdropClick = true };
        
        _updateMudDialog.Show($"Modifier une commande PR:{_selectedOrder.ReqNumber.ToString()} ", dialogOptions);

    }
    //Close update Dialog
    private void CloseUpdateDialog() => _updateMudDialog.Close();



    //find vendor for Autocomplete
    private async Task<IEnumerable<string>> FindVendorsAsync(string searchVendor) => await FindVendor.FindVendorsAsyncDelegate(searchVendor, Client);
    private string FindDescription(string query) => FindVendor.GetDescription(query);


}
