@page "/importpendingpr"
@using System.Globalization
@using System.IO
@using System.Threading
@inject HttpClient _client
@inject NavigationManager NavigationManager

<h1>Importation des demande d'achat en cours</h1>
<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudIcon Icon="@Icons.Material.Outlined.List"></MudIcon>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">Vérification des demande d'achat importées</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Outlined.Add" Color="Color.Inherit" />
            <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Class="d-flex align-center py-2 px-1" Elevation="0" Style="min-width: 400px; min-height: 100px">
            <InputFile id="fileInput" OnChange="UploadFileOrders" accept=".csv" hidden />
            <MudButton htmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.AttachFile" For="fileInput">
                Importer
            </MudButton>
            <MudSpacer />
            <MudText>
                <MudChip Color="Color.Inherit">@_fileName</MudChip>
            </MudText>
            <MudSpacer />
            <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="_loading" />

        </MudPaper>
        <MudPaper>
            <MudTable @ref="_mudTableTempOrders" Items="_orders" @bind-SelectedItem="_selectedOrder" Hover="true"
                Dense="true" Loading="_loading" Striped="true" FixedHeader="true">
                <HeaderContent>

                    <MudTh>Agent</MudTh>
                    <MudTh>Location</MudTh>
                    <MudTh>PR</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Date Pr</MudTh>

                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.AgentName</MudTd>
                    <MudTd>@context.Localisation</MudTd>
                    <MudTd>@context.ReqNumber.ToString()</MudTd>
                    <MudTd>@context.Description</MudTd>
                    <MudTd>@context.PrDate.Value.ToString(CultureInfo.CurrentCulture)</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudPaper>
        <MudPaper Elevation="0" Class="my-4" Style="height: 30px;">
            <MudProgressLinear @ref="_mudProgressLinear" Size="Size.Large" Color="Color.Success"
                Indeterminate="@_indeterminate" Value="_progressValue" />

        </MudPaper>
        <MudPaper Class="d-flex px-6 justify-space-between py-6">
            <MudChip @ref="_mudChipProgress" Color="Color.Info">@_progressValue.ToString() %</MudChip>
            <MudChip @ref="_mudChipSuccess" Color="Color.Success">@_counterSuccess.ToString() importées</MudChip>
            <MudChip Color="Color.Primary">@_watchValue.ToString()</MudChip>
            <MudChip @ref="_mudChipError" Color="Color.Error">@_errorCounter.ToString() erreurs</MudChip>
        </MudPaper>


        <div class="d-flex justify-space-between py-6">
            <MudButton @ref="_btnRetour" OnClick="Retour" Disabled="_disabledBtnRetour" Variant="Variant.Outlined"
                StartIcon="@Icons.Material.Outlined.Approval" Color="Color.Success">Retour</MudButton>
            <MudButton @ref="_btnValidateOne" OnClick="ValidateImportationOneByOne"
                Disabled="_disabledBtnValidateOneByOne" Variant="Variant.Filled"
                StartIcon="@Icons.Material.Outlined.Approval" Color="Color.Success">Valider un par un</MudButton>

        </div>

    </MudCardContent>
</MudCard>

@code {
    private MudChip _mudChipProgress;
    private MudChip _mudChipSuccess;
    private MudChip _mudChipError;
    private MudProgressLinear _mudProgressLinear;
    private string _message = "";
    private Severity _severity = Severity.Info;
    private string _fileName = "";
    private List<Order> _orders = new List<Order>();
    private bool _loading = false;
    private MudTable<Order> _mudTableTempOrders;
    private int _progressValue;
    private MudButton _btnRetour;
    private MudButton _btnValidateOne;
    private int _counterSuccess; //import counter success
    private int _errorCounter; //import counter error
    private Order _selectedOrder;
    private bool _indeterminate = false;
    private bool _disabledBtnRetour = false;
    private bool _disabledBtnValidateOneByOne = true;
    private int _totalOrderToImport = int.MinValue;
    private int _counter;
    private TimeSpan _watchValue = new TimeSpan();
    private bool _isWatchrunning = false;


    private async Task Watch()
    {
        _isWatchrunning = true;
        while (_isWatchrunning)
        {
            await Task.Delay(1000);
            if (_isWatchrunning)
            {
                _watchValue = _watchValue.Add(new TimeSpan(0, 0, 1));
                StateHasChanged();
            }
        }
    }

    //Retour à la page de PR Pending
    private void Retour()
    {
        NavigationManager.NavigateTo("orderspending");
    }

    //import one by one
    private async Task ValidateImportationOneByOne()
    {
        _disabledBtnValidateOneByOne = true;
        _disabledBtnRetour = true;
        _totalOrderToImport = _orders.Count;
        _loading = true;
        //Watch();
        //_indeterminate = true;



        ////OPTION 2 Take Time but job done without error
        Task[] jobs = new Task[_totalOrderToImport];
        for (int i = 0; i < _totalOrderToImport; i++)
        {
            try
            {
                jobs[i] = _client.PostAsJsonAsync("api/Orders/PostPending", _orders[i], CancellationToken.None);
                await jobs[i].ContinueWith(c =>
               {
                   _counterSuccess++;
                   _counter++;
                   var prog = (decimal)_counter / _totalOrderToImport;
                   _progressValue = (int)Math.Round((prog) * 100, MidpointRounding.ToEven);
                   StateHasChanged();
               });
            }
            catch (Exception e)
            {
                _errorCounter++;
                _counter++;
                Console.WriteLine(e.Message);
                StateHasChanged();
            }
        }
        await Task.WhenAll(jobs).ContinueWith(c =>
        {
            _loading = false;
            _isWatchrunning = false;
            _disabledBtnRetour = false;

        });


        ////OPTION 3 work with errors
        //BUGS
        // await Task.WhenAll(_orders.Select(order => Task.Run<Task>(async () =>
        // {
        // try
        // {
        // await _client.PostAsJsonAsync("api/Orders/Post", order, CancellationToken.None)
        // .ContinueWith(async c =>
        // {
        // var result = await c;
        // if (result.IsSuccessStatusCode)
        // {
        // _counterSuccess++;
        // _counter++;
        // }
        // else
        // {
        // _errorCounter++;
        // }
        // _progressValue = (int) Math.Round((decimal)_counter / (decimal)_totalOrderToImport * 100, MidpointRounding.ToEven);
        // StateHasChanged();
        // });
        // }
        // catch (Exception e)
        // {
        // Console.WriteLine(e.Message);
        // }
        //
        //
        // }
        // )));

    }

    private async Task UploadFileOrders(InputFileChangeEventArgs e)
    {
        _loading = true;
        _disabledBtnRetour = false;
        _disabledBtnValidateOneByOne = false;
        IBrowserFile file = e.File;
        _fileName = file.Name;

        //importer le fichier et traiter le contenu en Orders
        using (var streamReader = new StreamReader(file.OpenReadStream()))
        {
            int count = 0;
            _orders = new List<Order>();
            var bloc = await streamReader.ReadToEndAsync();
            var blocLine = bloc.Split('\n');
            for (int i = 0; i < blocLine.Length - 1; i++)
            {
                count++;
                var orderLine = blocLine[i].Split(";");
                int noLine;
                int.TryParse(orderLine[2], out noLine);
                DateTime prDate;
                DateTime.TryParse(orderLine[7], out prDate);
                DateTime approveDate;
                DateTime.TryParse(orderLine[8], out approveDate);
                int req;
                int.TryParse(orderLine[3], out req);
                DateTime poDate;
                DateTime.TryParse(orderLine[15], out poDate);
                double amount;
                double.TryParse(orderLine[13], out amount);
                if (amount == 0) amount = 1;
                Order order = new Order
                {
                    Id = null,
                    AgentName = orderLine[0],
                    NoLigne = noLine,
                    UnitName = orderLine[1],
                    ReqNumber = req,
                    Description = orderLine[4],
                    Localisation = orderLine[5],
                    Type = orderLine[6],
                    PrDate = prDate,
                    ApprovedDate = approveDate,
                    Status = orderLine[10],
                    PurchaseOrder = orderLine[11],
                    DatePo = poDate,
                    Amount = amount,
                    //VendorId = orderLine[12]
                    VendorId = null
                };
                _orders.Add(order);
            }
            _fileName = $"{count} Commandes";
        }
        _loading = false;
    }

}