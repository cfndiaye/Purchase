@page "/vendordetails/{Id}"
@inject HttpClient _client
@inject NavigationManager NavigationManager

@attribute [Authorize]


<VerifyIsAuthenticate />

<MudText Typo="Typo.h5">Tableau de bord Vendor</MudText>
<MudText Typo="Typo.subtitle1">Détails Vendor: @Vendor?.Name</MudText>
<MudSpacer />
<MudDivider DividerType="DividerType.FullWidth" Class="mb-4" />
<div class="row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-4 my-4">
    <div class="col-sm my-2">
        <WidgetCounter Description="Situation Année encours"
                       Counter = "@_totalCostCurrentYear"
                       Currency = "@_currency"
                       BgColor="#5e72e4" 
                       TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Custom.Uncategorized.AlertSuccess"
                        />
    </div>
    <div class="col-sm my-2">
         <WidgetCounter Description="Situation Année précédente"
                       Counter = "@_totalCostLastYear"
                       Currency = "@_currency"
                       BgColor="#f5365c" 
                       TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Custom.Uncategorized.AlertSuccess"
                        />
    </div>
    <div class="col-sm my-2">
        <WidgetCounter Description="Situation totale"
                       Counter = "@_countOrders"
                       Currency = "Commandes"
                       BgColor="#fb6340" 
                       TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Custom.Uncategorized.AlertSuccess"
                        />
    </div>

</div>
@*<MudGrid Spacing="@spacing" Justify="Justify.Center" Class="mb-4">
    <MudItem xs="4">
        <OrderWidget Title="Situation Année encours" Amount="@_totalCostCurrentYear"
                     Counter="_countOrdersCurrentYear" Currency="@_currency"
                     DescriptionCounter="Total commandes"
                     DescriptionAmount="Cout Total"
                     CustomColor="@Colors.Grey.Lighten5" BgColor="@Colors.Blue.Darken1" TextColor="@Colors.BlueGrey.Lighten5"
                     CustomContentIcon="@Icons.Custom.Uncategorized.AlertSuccess"
                     CustomContentCounterIcon="@Icons.Material.Outlined.AddShoppingCart"
                      Height="@Height" />
    </MudItem>
    <MudItem xs="4">
        <OrderWidget Title="Situation Année Précédente" Amount="@_totalCostLastYear"
                     Counter="_countOrdersLastYear" Currency="@_currency"
                     DescriptionCounter="Total commandes"
                     DescriptionAmount="Cout Total"
                     CustomColor="@Colors.Grey.Lighten5" BgColor="@Colors.Yellow.Darken3" TextColor="@Colors.BlueGrey.Lighten5"
                     CustomContentIcon="@Icons.Custom.Uncategorized.AlertSuccess"
                     CustomContentCounterIcon="@Icons.Material.Outlined.AddShoppingCart"
                      Height="@Height" />
    </MudItem>
    <MudItem xs="4">
        <OrderWidget Title="Situation Totale" Amount="@_totalCost"
                     Counter="_countOrders" Currency="@_currency"
                     DescriptionCounter="Total commandes"
                     DescriptionAmount="Cout Total"
                     CustomColor="@Colors.Grey.Lighten5" BgColor="@Colors.LightGreen.Darken3" TextColor="@Colors.BlueGrey.Lighten5"
                     CustomContentIcon="@Icons.Custom.Uncategorized.AlertSuccess"
                     CustomContentCounterIcon="@Icons.Material.Outlined.AddShoppingCart"
                      Height="@Height" />
    </MudItem>


</MudGrid>*@
<MudDivider DividerType="DividerType.FullWidth" Class="mb-4" />


<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudIcon Icon="@Icons.Material.Outlined.Source" />
        </CardHeaderAvatar>
        <CardHeaderContent>


            <MudText Typo="Typo.body1">Tableau de bord Vendor </MudText>

        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Title="Retour" Icon="@Icons.Material.Outlined.ArrowBack" OnClick="() => { NavigationManager.NavigateTo(_vendorListPage); }" />
            <MudIconButton Title="Ajouter" Icon="@Icons.Material.Outlined.Add" OnClick="() => { _addOrder.Show(); }" />
            <MudIconButton Title="Actualiser" Icon="@Icons.Material.Outlined.Refresh" OnClick="async () => { await OnInitializedAsync(); }" />
        </CardHeaderActions>
    </MudCardHeader>


    <OrderTable @ref="@_orderTable" Client="@_client" Message="@_message" Dense="@_dense" Loading="@_loading"
                MarginDense="@_marginDense" Severity="@_severity" SelectedOrder="@_selectedOrder" />
    @*intégration du composant AddOrder*@
    <AddOrder @ref="_addOrder" Client="_client" @bind-OrdersList="_ordersList" MarginDense="_marginDense"
              @bind-Message="_message" @bind-Loading="@_loading" @bind-Severity="@_severity" />

</MudCard>

@code {

    [Parameter]
    public string Id { get; set; }
    public Vendor Vendor { get; set; }
    private OrderTable _orderTable;
    private AddOrder _addOrder;
    private List<Order> _ordersList = new List<Order>();

    private int spacing { get; set; } = 4;

    public string _message = "";
    public string _currency = "";

    public bool _dense = true;
    public Margin _marginDense = Margin.Dense;
    public Order _selectedOrder;
    public bool _loading = false;
    public Severity _severity = Severity.Normal;

    private decimal _totalCost = 0;
    private decimal _totalCostCurrentYear = 0;
    private decimal _totalCostLastYear = 0;
    private int _countOrders = 0;
    private int _countOrdersCurrentYear = 0;
    private int _countOrdersLastYear = 0;
    private string _vendorListPage = "Vendors";

    private string Width = "400px";
    private string Height = "180px";

    protected override async Task OnInitializedAsync()
    {
        var URL = $"api/vendors/Get/{Id}/true";
        var URLOrder = $"api/orders/GetOrdersByVendorId/{Id}";

        try
        {
            _loading = true;
            var vendor = await _client.GetFromJsonAsync<Vendor>(URL);
            var orders = await _client.GetFromJsonAsync<List<Order>>(URLOrder);

            if (vendor != null)
            {
                Vendor = vendor;
                if (Vendor.OrderList != null)
                {
                    _ordersList = vendor.OrderList;
                    switch (Vendor.Type)
                    {
                        case "Local":
                            _currency = "XOF";
                            break;
                        case "Asie":
                            _currency = "USD";
                            break;
                        case "Europe":
                            _currency = "EURO";
                            break;

                        default:
                            _currency = "XOF";
                            break;
                    }
                    //_totalCost = (decimal)vendor.OrderList.Distinct().Sum(o => o.Amount);
                    _totalCost = (decimal)orders.Sum(o => o.Amount);

                    //_totalCostCurrentYear = (decimal)vendor.OrderList.Where(o => o.DatePo.Value.Year == DateTime.Now.Year).Sum(o => o.Amount);

                    _totalCostCurrentYear = (decimal)orders.Where(o => o.DatePo.Value.Year == DateTime.Now.Year)
                                                           .Sum(o => o.Amount);

                    //_totalCostLastYear = (decimal)vendor.OrderList.Where(o => o.DatePo.Value.Year == DateTime.Now.Year - 1).Sum(o => o.Amount);

                    _totalCostLastYear = (decimal)orders.Where(o => o.DatePo.Value.Year == DateTime.Now.Year - 1)
                                                           .Sum(o => o.Amount);
                    //_countOrders = vendor.OrderList.Count;

                    _countOrders = orders.Count;

                    _countOrdersCurrentYear = orders.Where(o => o.DatePo.Value.Year == DateTime.Now.Year)
                                                    .Count();

                    _countOrdersLastYear = orders.Where(o => o.DatePo.Value.Year == DateTime.Now.Year - 1)
                                                 .Count();

                    //include vendor name
                    //var orders = vendor.OrderList;
                    orders.ForEach(o => o.Vendor = new Vendor { Id = vendor.Id, Name = vendor.Name });
                    _orderTable.DataLoaded(true, orders);
                }
            }
            _loading = false;


        }
        catch (Exception ex)
        {
            _message = ex.Message;
            _severity = Severity.Error;
        }


    }

}
