@page "/Dashboard"
@inject HttpClient _client
@inject NavigationManager NavigationManager
@attribute [Authorize]

<VerifyIsAuthenticate ReturnUrl ="Dashboard"/>

<MudSpacer />
<div class="row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-4 my-4">
    <div class="col-sm my-2">
        <WidgetCounter Counter="@_totalCostLocal" Currency="XOF" Description="Commandes locales"
                       CustomColor="@Colors.Grey.Lighten5" BgColor="#E4572E" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Custom.Uncategorized.AlertSuccess" />
    </div>
    <div class="col-sm my-2">
        <WidgetCounter Counter="@_totalCostEurope" Currency="€" Description="Commandes Europe"
                       CustomColor="@Colors.Grey.Lighten5" BgColor="#29335C" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Material.Filled.Euro" />
    </div>
    <div class="col-sm my-2">
        <WidgetCounter Counter="@_totalCostUSD" Currency="$" Description="Commandes en ASIE"
                       CustomColor="@Colors.Grey.Lighten5" BgColor="#F3A712" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Filled.AttachMoney" />
    </div>
    <div class="col-sm my-2">
        <WidgetCounter Counter="@_totalCostUSD_USA" Currency="$" Description="Commandes aux USA"
                       CustomColor="@Colors.Grey.Lighten5" BgColor="#A8C686" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Filled.AttachMoney" />
    </div>
    <div class="col-sm my-2">
        <WidgetCounter Counter="@_totalCost_In_Usd" Currency="$" Description="Commandes Total"
                       CustomColor="@Colors.Grey.Lighten5" BgColor="#669BBC" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Filled.AttachMoney" />
    </div>

</div>
<div class="row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-4 my-4">
    <div class="col-sm-8">
        <WidgetBarreChart Data="@_topVendorsCurrentYear" />
        
    </div>
    <div class="col-sm-4">
        <WidgetDonutChart @ref="_widgetDonutChart"  VendorTypes="@_typeVendorStats" />
    </div>
</div>

<div class="row row-cols-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-4 my-4">
    <div class="col-sm my-2">
        <TopVendor Title="Top Vendors Local" Client="_client" Count="_top" Type="@_LOCAL"
                   UrlTopVendors="@_URITOPVENDORS" TableHeight="@_heightTableTopVendor" Currency="F" />

    </div>
    <div class="col-sm my-2">
        <TopVendor Title="Top Vendors Europe" Client="_client" Count="_top" Type="@_EUROPE"
                   UrlTopVendors="@_URITOPVENDORS" TableHeight="@_heightTableTopVendor" Currency="€" />

    </div>
    <div class="col-sm my-2">
        <TopVendor Title="Top Vendors Asie" Client="_client" Count="_top" Type="@_ASIE" UrlTopVendors="@_URITOPVENDORS"
                   TableHeight="@_heightTableTopVendor" Currency="$" />

    </div>
    <div class="col-sm my-2">
        <TopVendor Title="Top Vendors Usa" Client="_client" Count="_top" Type="@_USA" UrlTopVendors="@_URITOPVENDORS"
                   TableHeight="@_heightTableTopVendor" Currency="$" />

    </div>
</div>





@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private string _uriLogin = "login";

    private const int _top = 5;
    [CascadingParameter] public MainLayout Layout { get; set; }

    private bool _isAuthenticate;

    private WidgetDonutChart _widgetDonutChart;

    private int spacing { get; set; } = 2;

    private const string _URITOTALCOSTBYCURRENCY_XOF = "api/orders/GetTotalCostByType/Locale";
    private const string _URITOTALCOSTBYCURRENCY_USD = "api/orders/GetTotalCostByType/Asie";
    private const string _URITOTALCOSTBYCURRENCY_EUR = "api/orders/GetTotalCostByType/Europe";
    private const string _URITOTALCOSTBYCURRENCY_USD_USA = "api/orders/GetTotalCostByType/Usa";
    private const string _LOCAL = "Locale";
    private const string _EUROPE = "Europe";
    private const string _ASIE = "Asie";
    private const string _USA = "Usa";
    private string _URITOPVENDORS = "api/Vendors/GetTopVendors";
    private string _URIALLTOPVENDORS = "api/Vendors/GetAllTopVendors";

    private int CountNumberOrderProformaPending;
    private int CountNumberPrPending;

    //cout total commande locale
    private decimal _totalCostLocal;
    //cout total commande Europe
    private decimal _totalCostEurope;
    //cout total commande Asie
    private decimal _totalCostUSD;
    //cout total commande Usa
    private decimal _totalCostUSD_USA;

    //Cout total des commandes en dollars
    private decimal _totalCost_In_Usd;

    //hauteur des tables
    private string _heightTableTopVendor = "210px";

    //Top vendors année encours
    private List<VendorStat> _topVendorsCurrentYear = new List<VendorStat>();
    //Top vendors année précédente
    private List<VendorStat> _topVendorsLastYear = new List<VendorStat>();


    //Data pour le graphe donut type vendors
    private List<TypeVendorStat> _typeVendorStats = new List<TypeVendorStat>{ };

    //Get current and last year
    private int _currentYear => DateTime.UtcNow.Year;
    private int _lastYear => DateTime.UtcNow.Year - 1;




    private async Task LoadTotalXOFCost()
    {


        //Get total cost by currency XOF
        var totalCostLocalLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_XOF);
        _totalCostLocal = await totalCostLocalLoading;

        var localCoastToUsd = Devise.ConvertCfaToUsd(_totalCostLocal); //_totalCostLocal / (decimal)630;
        var typeVendorStat = new TypeVendorStat(_LOCAL, localCoastToUsd);
        _typeVendorStats.Add(typeVendorStat);


        StateHasChanged();

    }

    private async Task LoadTotalEURCost()
    {
        //Get total cost by cuurency EUR
        var totalCostEuropeLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_EUR);

        _totalCostEurope = await totalCostEuropeLoading;

        var europeCostToUsd = Devise.ConvertEuroToUsd(_totalCostEurope); //_totalCostEurope / (decimal)0.974;
        var typeVendorStat = new TypeVendorStat(_EUROPE, europeCostToUsd);
        _typeVendorStats.Add(typeVendorStat);


        StateHasChanged();
    }

    private async Task LoadTotalUSD_USACost()
    {

        //Get total cost by cuurency USD and Vendor in USA
        var totalCostUsdUsaLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_USD_USA);
        _totalCostUSD_USA = await totalCostUsdUsaLoading;

        var typeVendorStat = new TypeVendorStat(_USA, _totalCostUSD_USA);
        _typeVendorStats.Add(typeVendorStat);


        StateHasChanged();
    }

    private async Task LoadTotalUSDCost()
    {

        //Get total cost by cuurency USD
        var totalCostUsdLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_USD);
        _totalCostUSD = await totalCostUsdLoading;

        var typeVendorStat = new TypeVendorStat(_ASIE, _totalCostUSD);
        _typeVendorStats.Add(typeVendorStat);


        StateHasChanged();
    }

    private async Task LoadTopVendors()
    {
        var uriCurrentYear = new StringBuilder(_URIALLTOPVENDORS).Append($"/{_top}/{_currentYear}");

        _topVendorsCurrentYear = await _client.GetFromJsonAsync<List<VendorStat>>(uriCurrentYear.ToString());


        StateHasChanged();
    }



    protected override async Task OnInitializedAsync()
    {


        //Run All Tasks in Parallele
        var tasks = new List<Task>();
        tasks.Add(LoadTopVendors());
        tasks.Add(LoadTotalXOFCost());
        tasks.Add(LoadTotalUSDCost());
        tasks.Add(LoadTotalEURCost());
        tasks.Add(LoadTotalUSD_USACost());


        await Task.WhenAll(tasks);

        _totalCost_In_Usd = _totalCostUSD_USA +
                            _totalCostUSD +
                            Devise.ConvertCfaToUsd(_totalCostLocal)  +
                            Devise.ConvertEuroToUsd(_totalCostEurope);



        Layout.TitlePlus = "Tableau de bord";
        StateHasChanged();

    }





}
