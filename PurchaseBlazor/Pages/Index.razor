@page "/home"
@inject HttpClient _client
@attribute [Authorize]

<MudText Typo="Typo.h5">Tableau de bord</MudText>
<MudText Typo="Typo.subtitle1">Suivi des demandes d'achat et commandes</MudText>
<MudSpacer />
<MudDivider DividerType="DividerType.FullWidth" Class="mb-4" />

<MudGrid Spacing="@spacing" Justify="Justify.Center"  Class="mb-4">
    <MudItem xs="3">
        <WidgetCounter Counter="@_totalCostLocal" Currency="XOF" Description="Commandes locales"
                       CustomColor="@Colors.Grey.Lighten5" 
                       BgColor="@Colors.LightGreen.Darken3" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Custom.Uncategorized.AlertSuccess" />
    </MudItem>
    <MudItem xs="3">
        <WidgetCounter Counter="@_totalCostEurope" Currency="€" Description="Commandes Europe"
                       CustomColor="@Colors.Grey.Lighten5" 
                       BgColor="@Colors.LightBlue.Darken3" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Material.Filled.Euro" />
    </MudItem>
    <MudItem xs="3">
        <WidgetCounter Counter="@_totalCostUSD" Currency="$" Description="Commandes en ASIE"
                       CustomColor="@Colors.Grey.Lighten5" 
                       BgColor="@Colors.Yellow.Darken3" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Filled.AttachMoney" />
    </MudItem>
    <MudItem xs="3">
        <WidgetCounter Counter="@_totalCostUSD_USA" Currency="$" Description="Commandes aux USA"
                       CustomColor="@Colors.Grey.Lighten5" 
                       BgColor="@Colors.Yellow.Darken3" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Filled.AttachMoney" />
    </MudItem>
</MudGrid>

<MudDivider DividerType="DividerType.FullWidth" Class="mb-4" />
<MudGrid Spacing="@spacing" Justify="Justify.Center" Class="mb-4">
    <MudItem xs="3">
        <TopVendor Title="Top Vendors Local" Client="_client" Count="_top" Type="@_LOCAL" UrlTopVendors="@_URITOPVENDORS"   TableHeight="@_heightTableTopVendor" Currency="F"/>
      
    </MudItem>
    <MudItem xs="3">
        <TopVendor Title="Top Vendors Europe" Client="_client" Count="_top" Type="@_EUROPE" UrlTopVendors="@_URITOPVENDORS"   TableHeight="@_heightTableTopVendor" Currency="€" />
       
    </MudItem>
    <MudItem xs="3">
        <TopVendor Title="Top Vendors Asie" Client="_client" Count="_top" Type="@_ASIE" UrlTopVendors="@_URITOPVENDORS"  TableHeight="@_heightTableTopVendor" Currency="$" />
        
    </MudItem>
    <MudItem xs="3">
        <TopVendor Title="Top Vendors Usa" Client="_client" Count="_top" Type="@_USA" UrlTopVendors="@_URITOPVENDORS"  TableHeight="@_heightTableTopVendor" Currency="$" />
        
    </MudItem>
</MudGrid>
<MudDivider DividerType="DividerType.FullWidth" Class="mb-4 mt-4" />

<MudText Typo="Typo.h6">PR PENDING</MudText>
<OrderTable @ref="_prPendingTable" Client="_client" Loading="_prPendingLoading"
            MarginDense="Margin.Dense" Message="" SelectedOrder="_selectedOrder"  />
<MudDivider DividerType="DividerType.FullWidth" Class="mb-4" />
<MudText Typo="Typo.h6">PROFORMA PENDING</MudText>
<OrderTable @ref="_poProformaPendingTable" Client="_client" Loading="_poProformaPendingLoading"
            MarginDense="Margin.Dense" Message="" SelectedOrder="_selectedOrder" />


@code {

    private const int _top = 5;
    [CascadingParameter] public MainLayout Layout{get; set;}
    private bool _isAuthenticate;
    private int spacing { get; set; } = 2;
    private Order _selectedOrder;
    private OrderTable _prPendingTable;
    private OrderTable _poProformaPendingTable;
    private List<Order> _prPending;
    private List<Order> _poProformaPending;
    private bool _prPendingLoading;
    private bool _poProformaPendingLoading;
    private const string _URIPRPENDING = "api/orders/GetOrdersByStatus/PR PENDING";
    private const string _URIPOPROFORMAPENDING = "api/orders/GetOrdersByStatus/WAITING PROFORMA";
    //private const string _URITOTALCOSTBYCURRENCY_XOF = "api/orders/GetTotalCostByCurrency/XOF";
    private const string _URITOTALCOSTBYCURRENCY_XOF = "api/orders/GetTotalCostByType/Locale";
    //private const string _URITOTALCOSTBYCURRENCY_USD = "api/orders/GetTotalCostByCurrency/USD";
    private const string _URITOTALCOSTBYCURRENCY_USD = "api/orders/GetTotalCostByType/Asie";
    //private const string _URITOTALCOSTBYCURRENCY_EUR = "api/orders/GetTotalCostByCurrency/EUR";
    private const string _URITOTALCOSTBYCURRENCY_EUR = "api/orders/GetTotalCostByType/Europe";
    private const string _URITOTALCOSTBYCURRENCY_USD_USA = "api/orders/GetTotalCostByType/Usa";
    private const string _LOCAL = "Locale";
    private const string _EUROPE = "Europe";
    private const string _ASIE = "Asie";
    private const string _USA = "Usa";
    private string _URITOPVENDORS = "api/Vendors/GetTopVendors";

    private int CountNumberOrderProformaPending;
    private int CountNumberPrPending;
    private int _rowParPage = 5;
    private decimal _totalCostLocal;
    private decimal _totalCostEurope;
    private decimal _totalCostUSD;
    private decimal _totalCostUSD_USA;


    private string _heightTableTopVendor = "210px";



    private async Task LoadPrPending()
    {
        var orderspendingLoading = _client.GetFromJsonAsync<List<Order>>(_URIPRPENDING);
        if (!orderspendingLoading.IsCompleted)
        {
            _prPendingLoading = true;
        }
        _prPending = await orderspendingLoading;
        CountNumberPrPending = _prPending.Count;
        _prPendingTable.DataLoaded(true, _prPending.Take(5).ToList());
        _prPendingLoading = false;

        StateHasChanged();
    }

    private async Task LoadProformaPending()
    {
        var ordersProformaPendingLoading = _client.GetFromJsonAsync<List<Order>>(_URIPOPROFORMAPENDING);
        if (!ordersProformaPendingLoading.IsCompleted)
        {
            _poProformaPendingLoading = true;
        }
        _poProformaPending = await ordersProformaPendingLoading;
        CountNumberOrderProformaPending = _poProformaPending.Count;
        _poProformaPendingTable.DataLoaded(true, _poProformaPending.Take(5).ToList());
        _poProformaPendingLoading = false;

        StateHasChanged();
    }
    private async Task LoadTotalXOFCost()
    {
        //Get total cost by cuurency XOF
        var totalCostLocalLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_XOF);
        _totalCostLocal = await totalCostLocalLoading;

        StateHasChanged();
    }

    private async Task LoadTotalEURCost()
    {
        //Get total cost by cuurency EUR
        var totalCostEuropeLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_EUR);
        _totalCostEurope = await totalCostEuropeLoading;

        StateHasChanged();
    }

    private async Task LoadTotalUSD_USACost()
    {

        //Get total cost by cuurency USD and Vendor in USA
        var totalCostUsdLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_USD_USA);
        _totalCostUSD = await totalCostUsdLoading;

        StateHasChanged();
    }

    private async Task LoadTotalUSDCost()
    {

        //Get total cost by cuurency USD
        var totalCostUsdLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_USD);
        _totalCostUSD = await totalCostUsdLoading;

        StateHasChanged();
    }



    protected override async Task OnInitializedAsync()
    {
        //Run All Tasks in Parallele
        var tasks = new List<Task>();
        tasks.Add(LoadPrPending());
        tasks.Add(LoadProformaPending());
        tasks.Add(LoadTotalUSDCost());
        tasks.Add(LoadTotalEURCost());
        tasks.Add(LoadTotalXOFCost());
        await Task.WhenAll(tasks);


        Layout.TitlePlus = "Tableau de bord";
        StateHasChanged();

    }



}
