@page "/home"
@inject HttpClient _client
@attribute [Authorize]

<MudText Typo="Typo.h5">Tableau de bord</MudText>
<MudText Typo="Typo.subtitle1">Suivi des demandes d'achat et commandes</MudText>
<MudSpacer />
<MudDivider DividerType="DividerType.FullWidth" Class="mb-4" />

<MudGrid Spacing="@spacing" Justify="Justify.Center" Class="mb-4">
    <MudItem>
        <WidgetCounter Counter="@_totalCostLocal" Currency="XOF" Description="Commandes locales"
                       CustomColor="@Colors.Grey.Lighten5" 
                       BgColor="@Colors.LightGreen.Darken3" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Custom.Uncategorized.AlertSuccess" />
    </MudItem>
    <MudItem>
        <WidgetCounter Counter="@_totalCostEurope" Currency="€" Description="Commandes Europe"
                       CustomColor="@Colors.Grey.Lighten5" 
                       BgColor="@Colors.LightBlue.Darken3" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Material.Filled.Euro" />
    </MudItem>
    <MudItem>
        <WidgetCounter Counter="@_totalCostUSD" Currency="$" Description="Commandes en Dollar"
                       CustomColor="@Colors.Grey.Lighten5" 
                       BgColor="@Colors.Yellow.Darken3" TextColor="@Colors.Grey.Lighten5"
                       CustomContentIcon="@Icons.Filled.AttachMoney" />
    </MudItem>
    <MudItem>
        <WidgetCounter Counter="@_totalCostLocal" Description="Commandes locales"
                       CustomColor="@Colors.Grey.Darken4" 
                       BgColor="@Colors.LightGreen.Lighten5" TextColor="@Colors.Grey.Darken4"
                       CustomContentIcon="@Icons.Material.Filled.Money" />
    </MudItem>
</MudGrid>

<MudDivider DividerType="DividerType.FullWidth" Class="mb-4" />
<MudGrid Spacing="@spacing" Justify="Justify.Center" Class="mb-4">
    <MudItem>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Top Vendors</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="_topVendors" Dense="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Nom vendor</MudTh>
                        <MudTh>Total</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nom vendor">@context.Name</MudTd>
                        <MudTd DataLabel="Total">@($"{context.TotalAmounts:n0} XOF")</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>

        </MudCard>
    </MudItem>
    <MudItem>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Top Vendors Europe</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="_topVendorsEuro" Dense="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Nom vendor</MudTh>
                        <MudTh>Total</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nom vendor">@context.Name</MudTd>
                        <MudTd DataLabel="Total">@($"{context.TotalAmounts:C0} ")</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>

        </MudCard>
    </MudItem>
    <MudItem>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Top Vendors USD</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="_topVendorsUsd" Dense="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Nom vendor</MudTh>
                        <MudTh>Total</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nom vendor">@context.Name</MudTd>
                        <MudTd DataLabel="Total">@($"{context.TotalAmounts:n0} USD")</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>

        </MudCard>
    </MudItem>
</MudGrid>
<MudDivider DividerType="DividerType.FullWidth" Class="mb-4 mt-4" />

<MudText Typo="Typo.h6">PR PENDING</MudText>
<OrderTable @ref="_prPendingTable" Client="_client" Loading="_prPendingLoading"
            MarginDense="Margin.Dense" Message="" SelectedOrder="_selectedOrder"  />
<MudDivider DividerType="DividerType.FullWidth" Class="mb-4" />
<MudText Typo="Typo.h6">PROFORMA PENDING</MudText>
<OrderTable @ref="_poProformaPendingTable" Client="_client" Loading="_poProformaPendingLoading"
            MarginDense="Margin.Dense" Message="" SelectedOrder="_selectedOrder" />


@code {

    private const int _top = 5;

    private bool _isAuthenticate;
    private int spacing { get; set; } = 4;
    private Order _selectedOrder;
    private OrderTable _prPendingTable;
    private OrderTable _poProformaPendingTable;
    private List<Order> _prPending;
    private List<Order> _poProformaPending;
    private bool _prPendingLoading;
    private bool _poProformaPendingLoading;
    private const string _URIPRPENDING = "api/orders/GetOrdersByStatus/PR PENDING";
    private const string _URIPOPROFORMAPENDING = "api/orders/GetOrdersByStatus/WAITING PROFORMA";
    private const string _URITOTALCOSTBYCURRENCY_XOF = "api/orders/GetTotalCostByCurrency/XOF";
    private const string _URITOTALCOSTBYCURRENCY_USD = "api/orders/GetTotalCostByCurrency/USD";
    private const string _URITOTALCOSTBYCURRENCY_EUR = "api/orders/GetTotalCostByCurrency/EUR";
    private const string _XOF = "XOF";
    private const string _EUR = "EUR";
    private const string _USD = "USD";
    private string _URITOPVENDORS = "api/Vendors/GetTopVendors";

    private int CountNumberOrderProformaPending;
    private int CountNumberPrPending;
    private int _rowParPage = 5;
    private decimal _totalCostLocal;
    private decimal _totalCostEurope;
    private decimal _totalCostUSD;
    private List<VendorStat> _topVendors = new List<VendorStat>();
    private List<VendorStat> _topVendorsEuro = new List<VendorStat>();
    private List<VendorStat> _topVendorsUsd = new List<VendorStat>();

    private string[] _xAxisLabels = new string[_top];
    private double[] _datas =  new double[_top];

    protected override async Task OnInitializedAsync()
    {
        //PR PENDING LOADING...
        var orderspendingLoading = _client.GetFromJsonAsync<List<Order>>(_URIPRPENDING);
        if(!orderspendingLoading.IsCompleted)
        {
            _prPendingLoading = true;
        }
        _prPending = await orderspendingLoading;
        CountNumberPrPending = _prPending.Count;
        _prPendingTable.DataLoaded(true, _prPending.Take(5).ToList());
        _prPendingLoading = false;

        //PO PROFORMAPENDING LOADING...
        var ordersProformaPendingLoading = _client.GetFromJsonAsync<List<Order>>(_URIPOPROFORMAPENDING);
        if(!ordersProformaPendingLoading.IsCompleted)
        {
            _poProformaPendingLoading = true;
        }
        _poProformaPending = await ordersProformaPendingLoading;
        CountNumberOrderProformaPending = _poProformaPending.Count;
        _poProformaPendingTable.DataLoaded(true, _poProformaPending.Take(5).ToList());
        _poProformaPendingLoading = false;

        //Get total cost by cuurency XOF
        var totalCostLocalLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_XOF);
        _totalCostLocal = await totalCostLocalLoading;
        //Get total cost by cuurency EUR
        var totalCostEuropeLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_EUR);
        _totalCostEurope = await totalCostEuropeLoading;
        //Get total cost by cuurency USD
        var totalCostUsdLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_USD);
        _totalCostUSD = await totalCostUsdLoading;

        //Loading series for graph top vendor
        _topVendors = await LoadCharts(_top, _XOF);
        _topVendorsEuro = await LoadCharts(_top, _EUR);
        _topVendorsUsd = await LoadCharts(_top, _USD);

    }

    private async  Task<List<VendorStat>> LoadCharts(int count, string currency)
    {
       
            var url = _URITOPVENDORS + "/" + count + "/" + currency;
            return await _client.GetFromJsonAsync<List<VendorStat>>(url);
    }

}
