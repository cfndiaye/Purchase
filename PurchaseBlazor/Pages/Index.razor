@page "/home"
@inject HttpClient _client
@attribute [Authorize]

<MudSpacer />
<MudDivider DividerType="DividerType.FullWidth" Class="mb-4" />
<div class="d-flex flex-grow-1 gap-4">
        <MudPaper class="flex-1 d-flex">
            <WidgetCounter Counter="@_totalCostLocal" Currency="XOF" Description="Commandes locales"
                CustomColor="@Colors.Grey.Lighten5" BgColor="#5e72e4" TextColor="@Colors.Grey.Lighten5"
                CustomContentIcon="@Icons.Custom.Uncategorized.AlertSuccess" />
        </MudPaper>
        <MudPaper class="flex-1 d-flex">
            <WidgetCounter Counter="@_totalCostEurope" Currency="€" Description="Commandes Europe"
                CustomColor="@Colors.Grey.Lighten5" BgColor="#f5365c" TextColor="@Colors.Grey.Lighten5"
                CustomContentIcon="@Icons.Material.Filled.Euro" />
        </MudPaper>
        <MudPaper class="flex-1 d-flex">
            <WidgetCounter Counter="@_totalCostUSD" Currency="$" Description="Commandes en ASIE"
                CustomColor="@Colors.Grey.Lighten5" BgColor="#2dce89" TextColor="@Colors.Grey.Lighten5"
                CustomContentIcon="@Icons.Filled.AttachMoney" />
        </MudPaper>
        <MudPaper class="flex-1 d-flex">
            <WidgetCounter Counter="@_totalCostUSD_USA" Currency="$" Description="Commandes aux USA"
                CustomColor="@Colors.Grey.Lighten5" BgColor="#fb6340" TextColor="@Colors.Grey.Lighten5"
                CustomContentIcon="@Icons.Filled.AttachMoney" />
        </MudPaper>
    
</div>
<MudDivider DividerType="DividerType.FullWidth" Class="mb-4" />
<MudGrid Spacing="@spacing" Justify="Justify.Center" Class="mb-4">
    <MudItem xs="3">
        <TopVendor Title="Top Vendors Local" Client="_client" Count="_top" Type="@_LOCAL"
            UrlTopVendors="@_URITOPVENDORS" TableHeight="@_heightTableTopVendor" Currency="F" />
 
    </MudItem>
    <MudItem xs="3">
        <TopVendor Title="Top Vendors Europe" Client="_client" Count="_top" Type="@_EUROPE"
            UrlTopVendors="@_URITOPVENDORS" TableHeight="@_heightTableTopVendor" Currency="€" />

    </MudItem>
    <MudItem xs="3">
        <TopVendor Title="Top Vendors Asie" Client="_client" Count="_top" Type="@_ASIE" UrlTopVendors="@_URITOPVENDORS"
            TableHeight="@_heightTableTopVendor" Currency="$" />

    </MudItem>
    <MudItem xs="3">
        <TopVendor Title="Top Vendors Usa" Client="_client" Count="_top" Type="@_USA" UrlTopVendors="@_URITOPVENDORS"
            TableHeight="@_heightTableTopVendor" Currency="$" />

    </MudItem>
</MudGrid>





@code {

    private const int _top = 5;
    [CascadingParameter] public MainLayout Layout { get; set; }
    private bool _isAuthenticate;
    private int spacing { get; set; } = 2;
    private const string _URITOTALCOSTBYCURRENCY_XOF = "api/orders/GetTotalCostByType/Locale";
    private const string _URITOTALCOSTBYCURRENCY_USD = "api/orders/GetTotalCostByType/Asie";
    private const string _URITOTALCOSTBYCURRENCY_EUR = "api/orders/GetTotalCostByType/Europe";
    private const string _URITOTALCOSTBYCURRENCY_USD_USA = "api/orders/GetTotalCostByType/Usa";
    private const string _LOCAL = "Locale";
    private const string _EUROPE = "Europe";
    private const string _ASIE = "Asie";
    private const string _USA = "Usa";
    private string _URITOPVENDORS = "api/Vendors/GetTopVendors";

    private int CountNumberOrderProformaPending;
    private int CountNumberPrPending;

    private decimal _totalCostLocal;
    private decimal _totalCostEurope;
    private decimal _totalCostUSD;
    private decimal _totalCostUSD_USA;


    private string _heightTableTopVendor = "210px";




    private async Task LoadTotalXOFCost()
    {
        //Get total cost by cuurency XOF
        var totalCostLocalLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_XOF);
        _totalCostLocal = await totalCostLocalLoading;

        StateHasChanged();
    }

    private async Task LoadTotalEURCost()
    {
        //Get total cost by cuurency EUR
        var totalCostEuropeLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_EUR);
        _totalCostEurope = await totalCostEuropeLoading;

        StateHasChanged();
    }

    private async Task LoadTotalUSD_USACost()
    {

        //Get total cost by cuurency USD and Vendor in USA
        var totalCostUsdUsaLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_USD_USA);
        _totalCostUSD_USA = await totalCostUsdUsaLoading;

        StateHasChanged();
    }

    private async Task LoadTotalUSDCost()
    {

        //Get total cost by cuurency USD
        var totalCostUsdLoading = _client.GetFromJsonAsync<decimal>(_URITOTALCOSTBYCURRENCY_USD);
        _totalCostUSD = await totalCostUsdLoading;

        StateHasChanged();
    }



    protected override async Task OnInitializedAsync()
    {

        //Run All Tasks in Parallele
        var tasks = new List<Task>();
        tasks.Add(LoadTotalUSDCost());
        tasks.Add(LoadTotalEURCost());
        tasks.Add(LoadTotalXOFCost());
        tasks.Add(LoadTotalUSD_USACost());
        await Task.WhenAll(tasks);


        Layout.TitlePlus = "Tableau de bord";
        StateHasChanged();

    }



}
