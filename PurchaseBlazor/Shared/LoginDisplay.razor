@inject NavigationManager NavigationManager
<AuthorizeView>
    <Authorized>

        <MudText>Welcome @UserName</MudText>
        <MudBadge Color="Color.Success" Overlap="true" Visible="false" Bordered="false">
            <MudAvatar Color="Color.Dark" Variant="Variant.Outlined" Class="ml-2">
                <MudIcon Color="Color.Inherit" Icon="@Icons.Material.Filled.Notifications" />
            </MudAvatar>
        </MudBadge>
        <MudIconButton Color="Color.Inherit" Title="Déconnexion" Icon="@Icons.Material.Filled.Logout"
            OnClick="() => { NavigationManager.NavigateTo(_logout); }"></MudIconButton>
    </Authorized>
    <NotAuthorized>
        <MudIconButton Color="Color.Inherit" Title="Login" Icon="@Icons.Material.Filled.Login"
            OnClick="() => { NavigationManager.NavigateTo(_uriLogin); }"></MudIconButton>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private bool isAuthenticated;
    private string _uriLogin = "login";
    private string _logout = "logout";
    [CascadingParameter]
    public string UserName { get; set; }

    public async Task GetUsername()
    {
        var authState = await AuthState;

        if (authState.User.Identity.IsAuthenticated)
        {
            var claim = authState.User.Claims.FirstOrDefault();
            UserName = claim.Value;
            isAuthenticated = true;
            Console.WriteLine($"Number of claims: {authState.User.Claims.Count()}");
            foreach (var cl in authState.User.Claims)
            {
                Console.WriteLine($"claim => Type: {cl.Type} : Value: {cl.Value}");
            }
        }
        StateHasChanged();
        
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUsername();
    }
}
