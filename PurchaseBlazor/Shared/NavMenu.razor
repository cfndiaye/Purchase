@using System.Threading
@inject HttpClient _client


<MudNavMenu>
    <MudNavLink Icon="@Icons.Filled.Dashboard" IconColor="Color.Inherit" Href="Dashboard">
        Tableau de Bord
    </MudNavLink>

    <MudDivider />
    <AuthorizeView>
        <Authorized>

            <MudNavGroup Expanded="true" Icon="@Icons.Material.Filled.List" IconColor="Color.Inherit"
                Title="Fournisseurs">
                <MudNavLink Icon="@Icons.Filled.List" IconColor="Color.Inherit" Href="/vendors">
                    Fournisseurs
                </MudNavLink>
            </MudNavGroup>
            <MudNavGroup Expanded="true" Icon="@Icons.Material.Filled.List" IconColor="Color.Inherit" Title="Commandes">

                <MudNavLink Icon="@Icons.Filled.Checklist" IconColor="Color.Inherit" Href="ordersclean">
                    Toutes les
                    Commandes
                </MudNavLink>
                <MudNavLink Icon="@Icons.Filled.FilterList" IconColor="Color.Inherit" Href="orderspending">
                    PR pending (
                    <OrderCounter Counter="@CountPrPending" />)
                </MudNavLink>
                <MudNavLink Icon="@Icons.Filled.SettingsOverscan" IconColor="Color.Inherit" Href="orderspendingtech">
                    Validation Technique (
                    <OrderCounter Counter="@CountPrTechnicalClearance" />)
                </MudNavLink>
                <MudNavLink Icon="@Icons.Filled.Inventory" IconColor="Color.Inherit" Href="orderspendingproforma">
                    Attente
                    Proforma (
                    <OrderCounter Counter="@CountPoWaitingProforma" />)
                </MudNavLink>
                <MudNavLink Icon="@Icons.Filled.PanTool" IconColor="Color.Inherit" Href="orderspendingdpi">
                    Attente
                    DPI&AC (
                    <OrderCounter Counter="@CountPoDpiAc" />)
                </MudNavLink>
                <MudNavLink Icon="@Icons.Filled.Approval" IconColor="Color.Inherit" Href="orderspendingapprobation">
                    Attente
                    Approbation (
                    <OrderCounter Counter="@CountPoApproval" />)
                </MudNavLink>
                <MudNavLink Icon="@Icons.Filled.DoneAll" IconColor="Color.Inherit" Href="orderscompletes">
                    Commandes
                    completes (
                    <OrderCounter Counter="@CountPoRelease" />)
                </MudNavLink>
            </MudNavGroup>
            <MudDivider />
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="async () => await LoadCounter()" />
            
                <MudCheckBox  @bind-Checked="@api_Radio" Color="Color.Success" UnCheckedColor="Color.Danger" Label="@apiAvailable" />
            

            
        </Authorized>
        <NotAuthorized>
            <MudNavLink Icon="@Icons.Filled.Info" Href="/about">A propos</MudNavLink>
            <MudNavLink Icon="@Icons.Filled.Login" Href="/login">Connexion</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <MudNavGroup Icon="@Icons.Filled.Settings" IconColor="Color.Inherit" Title="Settings" Expanded="true">
                <MudNavLink Icon="@Icons.Filled.People" IconColor="Color.Inherit" Href="/users">
                    Utilisateurs
                </MudNavLink>
                <MudNavLink Icon="@Icons.Filled.Group" IconColor="Color.Inherit" Href="/roles">
                    Roles
                </MudNavLink>
                <MudNavLink Icon="@Icons.Filled.Security" IconColor="Color.Inherit" Href="/security">
                    Politiques sécurité
                </MudNavLink>
            </MudNavGroup>
        </Authorized>
    </AuthorizeView>
    @*<MudAppBar Dense="true" Fixed="true" Bottom="true" Color="Color.Default" Elevation="1">
    <MudSpacer />
    <MudText Color="Color.Inherit">Version: @_clientVersion</MudText>
    </MudAppBar>*@
</MudNavMenu>


@code {
    private string _clientVersion = "1.0.0";
    private int CountPrPending = 0;
    private int CountPrTechnicalClearance = 0;
    private int CountPoWaitingProforma = 0;
    private int CountPoDpiAc = 0;
    private int CountPoApproval = 0;
    private int CountPoRelease = 0;
    private bool api_Radio = false;
    private string apiAvailable = string.Empty;

    private Timer _timer;


    private async Task<int> GetOrderCounter(string param)
    {
        var Url = $"api/Orders/GetOrderCounter/{param}";
        var counter = await _client.GetFromJsonAsync<int>(Url);
        return counter;
    }

    public async Task LoadCounter()
    {
        var task = new List<Task>();

        task.Add(Task.Run(async () => CountPrPending = await GetOrderCounter(OrderStatus.PR_PENDING)));
        task.Add(Task.Run(async () => CountPrTechnicalClearance = await GetOrderCounter(OrderStatus.TECHNICAL_CLEARANCE)));
        task.Add(Task.Run(async () => CountPoWaitingProforma = await GetOrderCounter(OrderStatus.WAITING_PROFORMA)));
        task.Add(Task.Run(async () => CountPoDpiAc = await GetOrderCounter(OrderStatus.DPI_AC)));
        task.Add(Task.Run(async () => CountPoApproval = await GetOrderCounter(OrderStatus.PO_APPROVAL)));
        task.Add(Task.Run(async () => CountPoRelease = await GetOrderCounter(OrderStatus.PO_RELEASED)));

        await Task.WhenAll(task);
        StateHasChanged();
    }


    //TODO: Make timer to check API avalaibility
    public void CheckAPIAvailability()
    {


        _timer = new Timer(async state =>
        {
            await LoadCounter();
            await CheckAPI();
            StateHasChanged();

        }, null, 0, 30000);


    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    protected override void OnInitialized()
    {
        CheckAPIAvailability();
    }

    private async Task<bool> CheckAPI()
    {
        var url = $"api/Index/IsAvailable";

        var result = await _client.GetFromJsonAsync<bool>(url);
        if (result)
        {
            api_Radio = true;
            apiAvailable = "Api Disponible";
            System.Console.WriteLine("API available");
        }
        else
        {
            api_Radio = false;
            apiAvailable = "Api non Disponible";
            System.Console.WriteLine("No API available");
        }
        return result;

    }





}